#!/usr/bin/env python

"""Google Analytics to Prometheus metrics exporter.

Based on the Google Analytics Reporting API v4 Python quickstart:
https://developers.google.com/analytics/devguides/reporting/core/v4/quickstart/service-py.

Check the API online docs:
https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet

and the interactive API explorer:
https://developers.google.com/apis-explorer/#p/analyticsreporting/v4/analyticsreporting.reports.batchGet.

"""

import configparser
import os
import sys

import httplib2
from apiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway


# import logging
# logging.basicConfig(level=logging.DEBUG)

# Explicit discovery URI for backwards compatibility with older versions
# python-googleapi.
V2_DISCOVERY_URI = ('https://{api}.googleapis.com/$discovery/rest?'
                    'version={apiVersion}')


def get_config(pkg, name):
    """
    Get configuration options for this script
    """
    config = configparser.SafeConfigParser()
    conffiles = [
        '/etc/{}.ini'.format(pkg),
        os.path.expanduser('~/.{}.ini'.format(pkg)),
        '{}.ini'.format(pkg),
    ]
    config.read(conffiles)
    return config[name]


def initialize_analyticsreporting(creds_path, scopes):
    """Initializes an analyticsreporting service object.

    Returns: analytics an authorized analyticsreporting service object.
    """
    credentials = ServiceAccountCredentials.from_json_keyfile_name(
        creds_path, scopes=scopes)
    http = credentials.authorize(httplib2.Http())

    # Build the service object.
    analytics = build(
        'analytics', 'v4', http=http, discoveryServiceUrl=V2_DISCOVERY_URI)

    return analytics


def get_report(analytics, view_id):
    responses = {
        'clouds': analytics.reports().batchGet(
            body={
                'reportRequests': [
                    {
                        'viewId': view_id,
                        'dateRanges': [{'startDate': '2015-01-01',
                                        'endDate': 'today'}],
                        'metrics': [
                            {'expression': 'ga:totalEvents'}
                        ],
                        'dimensionFilterClauses': [{
                            "filters": [{
                                'dimensionName': 'ga:eventAction',
                                'operator': 'IN_LIST',
                                "expressions": ["aws",
                                                "azure",
                                                "cloudsigma",
                                                "joyent",
                                                "openstack",
                                                "rackspace",
                                                "oracle",
                                                "vmware",
                                                "gce",
                                                "localhost",
                                                "maas"]
                            }],
                        }],
                        'dimensions': [{'name': 'ga:eventAction'},
                                       {'name': 'ga:eventCategory'}]
                    }]
            }).execute(),
        'spells': analytics.reports().batchGet(
            body={
                'reportRequests': [{
                    'viewId': view_id,
                    'dateRanges': [{'startDate': '2015-01-01',
                                    'endDate': 'today'}],
                    'metrics': [
                        {'expression': 'ga:totalEvents'}
                    ],
                    'dimensionFilterClauses': [{
                        "filters": [{
                            'dimensionName': 'ga:eventAction',
                            'operator': 'IN_LIST',
                            'expressions': [
                                "openstack-novalxd",
                                "ghost",
                                "openstack-base",
                                "spark-processing",
                                "hadoop-spark",
                                "hadoop-kafka",
                                "realtime-syslog-analytics",
                                "canonical-kubernetes",
                                "kubernetes-core",
                                "hadoop-processing"
                            ]
                        }],
                    }],
                    'dimensions': [{'name': 'ga:eventAction'},
                                   {'name': 'ga:eventCategory'}]
                }]
            }).execute(),
        'addons':  analytics.reports().batchGet(
            body={
                'reportRequests':
                [{
                    'viewId': view_id,
                    'dateRanges': [{'startDate': '2015-01-01',
                                    'endDate': 'today'}],
                    'metrics': [
                        {'expression': 'ga:totalEvents'}
                    ],
                    'dimensionFilterClauses': [{
                        "filters": [{
                            'dimensionName': 'ga:eventCategory',
                            'expressions': [
                                "Addon\sSelected",
                            ]
                        }],
                    }],
                    'dimensions': [{'name': 'ga:eventCategory'},
                                   {'name': 'ga:eventAction'}]
                }]
            }).execute()
    }
    return responses


def set_gauges(registry, responses):
    """Parses and prints the Analytics Reporting API V4 response"""

    for category, response in responses.items():
        for report in response.get('reports', []):
            columnHeader = report.get('columnHeader', {})
            dimensionHeaders = columnHeader.get('dimensions', [])
            metricHeader = columnHeader.get('metricHeader', {})
            metricHeaders = metricHeader.get('metricHeaderEntries', [])
            rows = report.get('data', {}).get('rows', [])

            # Dynamically create gauges based on the API query response.
            gauges = {}
            for metric in metricHeaders:
                metric_name = metric['name'].replace('ga:', '')
                gauge = Gauge(
                    name='cu_dashboard_{}'.format(category),
                    documentation='GA metric for conjure-up {}'.format(
                        metric_name),
                    labelnames=[d.replace('ga:', '')
                                for d in dimensionHeaders],
                    registry=registry)
                gauges[metric['name']] = gauge

            for row in rows:
                dimensions = row.get('dimensions', [])
                dateRangeValues = row.get('metrics', [])

                for i, values in enumerate(dateRangeValues):
                    values = values.get('values')

                    for metricHeader, value in zip(metricHeaders, values):
                        metric_name = metricHeader.get('name')
                        value = int(value)

                        gauges[metric_name].labels(*dimensions).set(value)


def main():
    pkg = 'cu-kpi'
    name = os.path.basename(sys.argv[0])
    config = get_config(pkg, name)

    registry = CollectorRegistry()
    try:
        view_id = config['cu-ga-dashboard-view-id']
        creds_path = config['cu-ga-dashboard-credentials-file']
        scopes = ['https://www.googleapis.com/auth/analytics.readonly']

        analytics = initialize_analyticsreporting(creds_path, scopes)
        responses = get_report(analytics, view_id)
        set_gauges(registry, responses)

    finally:
        if '--debug' not in sys.argv:
            # if set_gauges bombed out for any reason, just upload blank data.
            push_to_gateway(
                config['push-gateway'],
                job='conjure-up-google-analytics',
                registry=registry)
        else:  # Debugging enabled.
            import pprint
            pprint.pprint([(x.name, x.samples) for x in registry.collect()])


if __name__ == '__main__':
    sys.exit(main())
